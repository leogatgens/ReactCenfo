{"version":3,"sources":["serviceWorker.js","App.js","Home/Home.js","Callback/Callback.js","history.js","Auth/auth0-variables.js","routes.js","Auth/Auth.js","index.js","Callback/loading.svg"],"names":["Boolean","window","location","hostname","match","App","route","this","props","history","replace","concat","auth","login","logout","renewSession","localStorage","getItem","isAuthenticated","react_default","a","createElement","Navbar","fluid","Header","Brand","href","Button","bsStyle","className","onClick","goTo","bind","id","Component","Home","style","cursor","Callback","position","display","justifyContent","height","width","top","bottom","left","right","backgroundColor","src","loading","alt","createHistory","AUTH_CONFIG","domain","clientId","callbackUrl","Auth","Object","classCallCheck","auth0","WebAuth","clientID","redirectUri","responseType","scope","handleAuthentication","getAccessToken","getIdToken","authorize","_this","parseHash","err","authResult","accessToken","idToken","setSession","console","log","alert","error","setItem","expiresAt","expiresIn","Date","getTime","_this2","checkSession","error_description","removeItem","routes","Router","Route","path","render","src_App","assign","src_Home_Home","_ref","test","hash","src_Callback_Callback","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.63807b6c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport { Navbar, Button } from 'react-bootstrap';\r\nimport './index.css';\r\n\r\nclass App extends Component {\r\n  goTo(route) {\r\n    this.props.history.replace(`/${route}`)\r\n  }\r\n\r\n  login() {\r\n    this.props.auth.login();\r\n  }\r\n\r\n  logout() {\r\n    this.props.auth.logout();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { renewSession } = this.props.auth;\r\n\r\n    if (localStorage.getItem('isLoggedIn') === 'true') {\r\n      renewSession();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { isAuthenticated } = this.props.auth;\r\n\r\n    return (\r\n      <div>\r\n        <Navbar fluid>\r\n          <Navbar.Header>\r\n            <Navbar.Brand>\r\n              <a href=\"#\">Auth0 - React</a>\r\n            </Navbar.Brand>\r\n            <Button\r\n              bsStyle=\"primary\"\r\n              className=\"btn-margin\"\r\n              onClick={this.goTo.bind(this, 'home')}\r\n            >\r\n              Home\r\n            </Button>\r\n            {\r\n              !isAuthenticated() && (\r\n                  <Button\r\n                    id=\"qsLoginBtn\"\r\n                    bsStyle=\"primary\"\r\n                    className=\"btn-margin\"\r\n                    onClick={this.login.bind(this)}\r\n                  >\r\n                    Log In\r\n                  </Button>\r\n                )\r\n            }\r\n            {\r\n              isAuthenticated() && (\r\n                  <Button\r\n                    id=\"qsLogoutBtn\"\r\n                    bsStyle=\"primary\"\r\n                    className=\"btn-margin\"\r\n                    onClick={this.logout.bind(this)}\r\n                  >\r\n                    Log Out\r\n                  </Button>\r\n                )\r\n            }\r\n          </Navbar.Header>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nclass Home extends Component {\r\n  login() {\r\n    this.props.auth.login();\r\n  }\r\n  render() {\r\n    const { isAuthenticated } = this.props.auth;\r\n    return (\r\n      <div className=\"container\">\r\n        {\r\n          isAuthenticated() && (\r\n              <h4>\r\n                You are logged in!\r\n              </h4>\r\n            )\r\n        }\r\n        {\r\n          !isAuthenticated() && (\r\n              <h4>\r\n                You are not logged in! Please{' '}\r\n                <a\r\n                  style={{ cursor: 'pointer' }}\r\n                  onClick={this.login.bind(this)}\r\n                >\r\n                  Log In\r\n                </a>\r\n                {' '}to continue.\r\n              </h4>\r\n            )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\nimport loading from './loading.svg';\n\nclass Callback extends Component {\n  render() {\n    const style = {\n      position: 'absolute',\n      display: 'flex',\n      justifyContent: 'center',\n      height: '100vh',\n      width: '100vw',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      right: 0,\n      backgroundColor: 'white',\n    }\n\n    return (\n      <div style={style}>\n        <img src={loading} alt=\"loading\"/>\n      </div>\n    );\n  }\n}\n\nexport default Callback;\n","import createHistory from 'history/createBrowserHistory'\r\n\r\nexport default createHistory()\r\n","export const AUTH_CONFIG = {\r\n    domain: 'leogatgens.auth0.com',\r\n    clientId: '3QMygDL8__3P7JaP5SkPYD8_RUSKwDU8',\r\n    callbackUrl: 'https://yourtrips.azurewebsites.net/callback'\r\n  }\r\n  ","import React from 'react';\r\nimport { Route, Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport Home from './Home/Home';\r\nimport Callback from './Callback/Callback';\r\nimport Auth from './Auth/Auth';\r\nimport history from './history';\r\n\r\nconst auth = new Auth();\r\n\r\nconst handleAuthentication = ({location}) => {\r\n  if (/access_token|id_token|error/.test(location.hash)) {\r\n    auth.handleAuthentication();\r\n  }\r\n}\r\n\r\nexport const makeMainRoutes = () => {\r\n  return (\r\n      <Router history={history}>\r\n        <div>\r\n          <Route path=\"/\" render={(props) => <App auth={auth} {...props} />} />\r\n          <Route path=\"/home\" render={(props) => <Home auth={auth} {...props} />} />\r\n          <Route path=\"/callback\" render={(props) => {\r\n            handleAuthentication(props);\r\n            return <Callback {...props} /> \r\n          }}/>\r\n        </div>\r\n      </Router>\r\n  );\r\n}\r\n","import history from '../history';\r\nimport auth0 from 'auth0-js';\r\nimport { AUTH_CONFIG } from './auth0-variables';\r\n\r\nexport default class Auth {\r\n  accessToken;\r\n  idToken;\r\n  expiresAt;\r\n\r\n  auth0 = new auth0.WebAuth({\r\n    domain: AUTH_CONFIG.domain,\r\n    clientID: AUTH_CONFIG.clientId,\r\n    redirectUri: AUTH_CONFIG.callbackUrl,\r\n    responseType: 'token id_token',\r\n    scope: 'openid'\r\n  });\r\n\r\n  constructor() {\r\n    this.login = this.login.bind(this);\r\n    this.logout = this.logout.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.getAccessToken = this.getAccessToken.bind(this);\r\n    this.getIdToken = this.getIdToken.bind(this);\r\n    this.renewSession = this.renewSession.bind(this);\r\n  }\r\n\r\n  login() {\r\n    this.auth0.authorize();\r\n  }\r\n\r\n  handleAuthentication() {\r\n    this.auth0.parseHash((err, authResult) => {\r\n      if (authResult && authResult.accessToken && authResult.idToken) {\r\n        this.setSession(authResult);\r\n      } else if (err) {\r\n        history.replace('/home');\r\n        console.log(err);\r\n        alert(`Error: ${err.error}. Check the console for further details.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  setSession(authResult) {\r\n    // Set isLoggedIn flag in localStorage\r\n    localStorage.setItem('isLoggedIn', 'true');\r\n\r\n    // Set the time that the access token will expire at\r\n    let expiresAt = (authResult.expiresIn * 1000) + new Date().getTime();\r\n    this.accessToken = authResult.accessToken;\r\n    this.idToken = authResult.idToken;\r\n    this.expiresAt = expiresAt;\r\n\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  renewSession() {\r\n    this.auth0.checkSession({}, (err, authResult) => {\r\n       if (authResult && authResult.accessToken && authResult.idToken) {\r\n         this.setSession(authResult);\r\n       } else if (err) {\r\n         this.logout();\r\n         console.log(err);\r\n         alert(`Could not get a new token (${err.error}: ${err.error_description}).`);\r\n       }\r\n    });\r\n  }\r\n\r\n  logout() {\r\n    // Remove tokens and expiry time\r\n    this.accessToken = null;\r\n    this.idToken = null;\r\n    this.expiresAt = 0;\r\n\r\n    // Remove isLoggedIn flag from localStorage\r\n    localStorage.removeItem('isLoggedIn');\r\n\r\n    // navigate to the home route\r\n    history.replace('/home');\r\n  }\r\n\r\n  isAuthenticated() {\r\n    // Check whether the current time is past the\r\n    // access token's expiry time\r\n    let expiresAt = this.expiresAt;\r\n    return new Date().getTime() < expiresAt;\r\n  }\r\n}\r\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { makeMainRoutes } from './routes';\n\n\nconst routes = makeMainRoutes();\nReactDOM.render(routes , document.getElementById('root'));\n\nserviceWorker.unregister();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n","module.exports = __webpack_public_path__ + \"static/media/loading.c5590569.svg\";"],"sourceRoot":""}